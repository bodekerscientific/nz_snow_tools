"""
code to plot maps of snow covered area for individual years from summary lists generated by catchment_evalutation.py
"""

from __future__ import division

import numpy as np
import pickle
import matplotlib.pylab as plt
from nz_snow_tools.util.utils import trim_data_to_mask, resample_to_fsca

which_model = 'dsc_snow'  # string identifying the model to be run. options include 'clark2009', 'dsc_snow', or 'all' # future will include 'fsm'
model_catchment = 'Clutha'
output_dem = 'nztm250m'  # identifier for output dem
years_to_take = range(2000, 2016 + 1)  # [2013 + 1]  # range(2001, 2013 + 1)
modis_sc_threshold = 50  # value of fsca (in percent) that is counted as being snow covered
model_swe_sc_threshold = 5  # threshold for treating a grid cell as snow covered
model_output_folder = 'P:/Projects/DSC-Snow/runs/output/clutha_nztm250m_erebus'
plot_folder = 'P:/Projects/DSC-Snow/runs/output/clutha_nztm250m_erebus/plots'

output_subcatchments = ['Clutha', 'Wilkin', 'Wanaka northern inflows', 'Upper Dart', 'Rees', 'Shotover', 'Teviot', 'Taieri', 'Upper Matukituki', 'Roaring Meg', \
                        'Pomahaka', 'Motutapu', 'Moonlight Creek', 'Matukituki', 'Manuherikia', 'Luggate Creek', 'Lochy', 'Lindis', \
                        'Kawarau', 'Greenstone', 'Hawea', 'Fraser', 'Clutha above Clyde Dam', 'Cardrona', 'Arrow', 'Bannockburn Creek']
mask_folder = 'T:/DSC-Snow/Masks'

# run_id = 'jobst_ucc_4'  # string identifying fortran dsc_snow run. everything after the year
run_ids = [ 'jobst_ucc_5_topleft','norton_5_topleft', 'vcsn_5_topleft']  # ,

for run_id in run_ids:
    ann = pickle.load(
        open(model_output_folder + '/summary_{}_{}_thres{}_swe{}_{}_{}.pkl'.format(model_catchment, output_dem, modis_sc_threshold, model_swe_sc_threshold,
                                                                                   which_model, run_id), 'rb'))
    # indexes 0-3 modis, 4-8 model 1 and 9-13 model 2
    # ann = [ann_ts_av_sca_m, ann_hydro_days_m, ann_dt_m, ann_scd_m,
    # ann_ts_av_sca, ann_ts_av_swe, ann_hydro_days, ann_dt, ann_scd,
    # ann_ts_av_sca2, ann_ts_av_swe2, ann_hydro_days2, ann_dt2, ann_scd2]

    ann_scd_m = np.asarray(ann[3], dtype=np.double)
    ann_scd = np.asarray(ann[7], dtype=np.double)

    ann_scd[(ann_scd == -999)] = np.nan
    ann_scd[(ann_scd_m == -1)] = np.nan  # set areas of water as nan

    ann_scd_m[(ann_scd_m <= -1)] = np.nan  # set areas outside of catchment and in water to nan

    # if average_scd == True:
    modis_scd = np.mean(ann_scd_m, axis=0)
    mod1_scd = np.mean(ann_scd, axis=0)

    main_mask = np.load(mask_folder + '/{}_clutha_dem_250m.npy'.format(model_catchment))

    # plot histogram of average scd for each subcatchment
    for subcatchment in output_subcatchments:

        fig1 = plt.figure(figsize=[10, 4])
        sub_mask = np.load(mask_folder + '/{}_clutha_dem_250m.npy'.format(subcatchment))
        sub_mask_modgrid = trim_data_to_mask(sub_mask, main_mask)
        modis_sub = trim_data_to_mask(modis_scd, sub_mask_modgrid)
        mod1_sub = trim_data_to_mask(mod1_scd, sub_mask_modgrid)
        mask_sub = trim_data_to_mask(sub_mask_modgrid, sub_mask_modgrid)
        modis_sub[~mask_sub] = np.nan
        mod1_sub[~mask_sub] = np.nan
        if np.sum(mask_sub)!= np.sum(~np.isnan(modis_sub)):
            print('{} vs {}'.format(np.sum(mask_sub),np.sum(~np.isnan(modis_sub))))

        plt.hist(modis_sub[~np.isnan(modis_sub)],np.arange(0,376,15))
        plt.hist(mod1_sub[~np.isnan(mod1_sub)], np.arange(0, 376, 15))

        plt.title('scd for modis fsca > {} and dsc_snow SWE thres= {}'.format(modis_sc_threshold,model_swe_sc_threshold))

        plt.tight_layout()
        plt.savefig(
            plot_folder + '/HistSCD{}to{}_sub_{}_{}_thres{}_swe{}_{}_{}.png'.format(years_to_take[0], years_to_take[-1], subcatchment, output_dem,
                                                                            modis_sc_threshold, model_swe_sc_threshold, which_model, run_id), dpi=300)
        plt.close()

